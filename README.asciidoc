= ilo

ilo is a link:https://github.com/containers/toolbox[toolbox] inspired tool to create/manage link:https://reproducible-builds.org/[reproducible build environments] based on link:https://www.opencontainers.org/[OCI] container images.
It defaults to run with link:https://podman.io/[podman] but can work with link:https://www.docker.com/products/container-runtime[docker] as well.

== Usage

Make sure that `ilo` is installed in your path or otherwise accessible from your terminal.
Currently two commands are provided: `shell` to run a single container and `compose` to run multiple containers defined in a link:https://docs.docker.com/compose/compose-file/[docker-compose.yml] file.

[source:shell]
----
[you@hostname project-dir]$ ilo shell
[root@container project-dir]#
----

By default, `ilo` will use `fedora:latest` as container image and execute `/bin/bash` inside the running container in an interactive tty session.
Both can be configured, as well as the runtime used by `ilo` (podman or docker) and other options.
A list of available commands and their options can be seen by calling `ilo --help` (or `ilo -h` for short).

== Customize Build Environment

In most cases `fedora:latest` will not be enough to compile/test/package/run your software.
While you can install additional packages inside the container, those changes will be lost once the container is removed.
Instead define your build environment either in a link:https://docs.docker.com/engine/reference/builder/[Dockerfile] or any other link:https://github.com/opencontainers/image-spec/blob/master/spec.md[OCI Image] compliant way.
Make sure that this image can be accessed by everyone in your team and use `ilo --image your.image.here:latest` to open a new instance of your build environment.

One easy way to accomplish this for open source projects, is to use the link:https://docs.docker.com/docker-hub/builds/[automated build system] from Docker Hub.
Make sure that Docker Hub rebuilds your build environment on every change to master (or any other branch) and have your contributors pull the resulting images to their machines.

== Argument Files

In order to share the same options/commands across your team, `ilo` supports argument files which contain the options (like which image to use) for your project.
Create an empty text file and put all options in there with their corresponding values.
You can specify all options in a single line, separated by whitespace or use a new line for every option.
Use that argument file by calling `ilo @file-name`.
You can mix argument files with regular CLI options as well, e.g. `ilo shell --image=openjdk:latest @some-file`.
The argument file used by `ilo` developers can be seen link:build-env[here] and is used like this `ilo @build-env`

== `direnv` Integration

link:https://direnv.net/[direnv] can be used to automatically execute a command once you enter a directory.
Together with `ilo`, you can do the following:

[source,shell]
----
[you@hostname ~]$ cd path/to/your/project
[root@container project-dir]#
----

As soon as you enter the directory of your project, `direnv` will call `ilo` which in turn will open your build environment for you.
In order to create a setup like this, first link:https://direnv.net/#basic-installation[install direnv] and then place a `.envrc` file in the root of your project which contains `ilo` and its arguments as its contents.

[source,txt]
----
[you@hostname project-dir]$ cat .envrc
ilo @build-env
----

== Tooling Support

`ilo` is able to speak with the following tools.

|===
|Tool
|Status
|Issues

|link:https://podman.io/[podman]
|Since 1.0.0
|link:https://codeberg.org/metio.wtf/ilo/issues?q=&type=all&sort=&state=open&labels=1355&milestone=0&assignee=0[Open Tickets]

|link:https://github.com/containers/podman-compose[podman-compose]
|Since 2.0.0
|link:https://codeberg.org/metio.wtf/ilo/issues?q=&type=all&sort=&state=open&labels=1356&milestone=0&assignee=0[Open Tickets]

|link:https://www.docker.com/products/container-runtime[docker]
|Since 1.0.0
|link:https://codeberg.org/metio.wtf/ilo/issues?q=&type=all&sort=&state=open&labels=1357&milestone=0&assignee=0[Open Tickets]

|link:https://docs.docker.com/compose/[docker-compose]
|Since 2.0.0
|link:https://codeberg.org/metio.wtf/ilo/issues?q=&type=all&sort=&state=open&labels=1358&milestone=0&assignee=0[Open Tickets]
|===

== Installation

Use the following locations in order to download the binary distribution of `ilo`:

* https://github.com/metio/ilo/releases
* https://codeberg.org/metio.wtf/ilo/releases

None of the widely used package managers have `ilo` in their repository yet.
In case you want to help package `ilo` for your preferred operating system, take a look at the link:https://codeberg.org/metio.wtf/ilo/issues?q=&type=all&sort=&state=open&labels=1361&milestone=0&assignee=0[open packaging issues].

Follow these steps in case you are on a unix (linux/mac) system and want to use the link:https://www.graalvm.org/[GraalVM] compiled link:https://www.graalvm.org/docs/reference-manual/native-image/[native image]:

[source,shell]
----
$ curl --location https://github.com/metio/ilo/releases/download/2.1.0/ilo-linux --output ilo
$ mv ilo ~/bin/ilo
$ chmod +x ~/bin/ilo
----

In case you don't want to (or cannot) use the native version, make sure that you have Java 11 installed and follow these steps:

[source,shell]
----
$ curl --location https://github.com/metio/ilo/releases/download/2.1.0/ilo-2.1.0.zip --output ilo.zip
$ unzip ilo.zip
$ ln --symbolic --relative ilo-2.1.0/bin/ilo ~/bin/ilo
----

Windows users have to use `ilo.bat` instead of `ilo` and put that `.bat` file in their `PATH`.
Take a look at link:https://codeberg.org/metio.wtf/ilo/issues/65[this ticket] in case you want to help extend the installation instructions for Windows.

== CLI Autocomplete

In order to get autocomplete working in your shell, run the following after installing `ilo`:

[source]
----
$ source <(ilo generate-completion)
----

Place the same line in your `.bashrc` or similar file.
Otherwise autocomplete will only work in your current shell.

== User Support

In case you need help, don't panic - we've all been there!
Try the following resources in order to get help:

* link:https://codeberg.org/metio.wtf/ilo/issues/new[open a new ticket]
* link:https://matrix.to/#/#ilo:matrix.org[join the chat room]
* link:https://metio.groups.io/g/ilo[send an email to the mailing list]
* link:https://stackoverflow.com/questions/tagged/ilo[ask on stackoverflow]
* Take a walk outside & come back to your issue with a fresh mind

== Alternatives

In case `ilo` does not offer what you are looking for, take a look at the following tools:

* link:https://github.com/containers/toolbox[toolbox]
* link:https://gitian.org/[gitian]
* link:https://rbm.torproject.org/[rbm]
* link:https://github.com/nerdvegas/rez[rez]
* link:https://github.com/mottosso/bleeding-rez[bleeding-rez]
* link:http://rbld.io/[rebuild]
* link:https://github.com/jasonwhite/ducible[ducible]
* link:https://buildpacks.io/[buildpacks]

== License

To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide.
This software is distributed without any warranty.

You should have received a copy of the CC0 Public Domain Dedication along with this software.
If not, see http://creativecommons.org/publicdomain/zero/1.0/.

== Mirrors

`ilo` is mirrored across several git repositories.
Use any of the following to get a copy of the source.

* https://codeberg.org/metio.wtf/ilo
* https://github.com/metio.wtf/ilo
* https://gitlab.com/metio.wtf/ilo
* https://bitbucket.org/metio-wtf/ilo
